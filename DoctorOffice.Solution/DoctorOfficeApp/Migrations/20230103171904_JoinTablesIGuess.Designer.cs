// <auto-generated />
using System;
using DoctorOffice.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorOfficeApp.Migrations
{
    [DbContext(typeof(DoctorOfficeContext))]
    [Migration("20230103171904_JoinTablesIGuess")]
    partial class JoinTablesIGuess
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DoctorOffice.Models.DocPat", b =>
                {
                    b.Property<int>("docpat_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("doctor_id")
                        .HasColumnType("int");

                    b.Property<int?>("doctor_id1")
                        .HasColumnType("int");

                    b.Property<int>("patient_id")
                        .HasColumnType("int");

                    b.Property<int?>("patient_id1")
                        .HasColumnType("int");

                    b.HasKey("docpat_id");

                    b.HasIndex("doctor_id1");

                    b.HasIndex("patient_id1");

                    b.ToTable("DocPat");
                });

            modelBuilder.Entity("DoctorOffice.Models.DocSpec", b =>
                {
                    b.Property<int>("docspec_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("doctor_id")
                        .HasColumnType("int");

                    b.Property<int?>("doctor_id1")
                        .HasColumnType("int");

                    b.Property<int>("specialty_id")
                        .HasColumnType("int");

                    b.Property<int?>("specialty_id1")
                        .HasColumnType("int");

                    b.HasKey("docspec_id");

                    b.HasIndex("doctor_id1");

                    b.HasIndex("specialty_id1");

                    b.ToTable("DocSpec");
                });

            modelBuilder.Entity("DoctorOffice.Models.Doctor", b =>
                {
                    b.Property<int>("doctor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.HasKey("doctor_id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorOffice.Models.Patient", b =>
                {
                    b.Property<int>("patient_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("birthday")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.HasKey("patient_id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DoctorOffice.Models.Specialty", b =>
                {
                    b.Property<int>("specialty_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.HasKey("specialty_id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("DoctorOffice.Models.DocPat", b =>
                {
                    b.HasOne("DoctorOffice.Models.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("doctor_id1");

                    b.HasOne("DoctorOffice.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("patient_id1");

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("DoctorOffice.Models.DocSpec", b =>
                {
                    b.HasOne("DoctorOffice.Models.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("doctor_id1");

                    b.HasOne("DoctorOffice.Models.Specialty", "specialty")
                        .WithMany()
                        .HasForeignKey("specialty_id1");

                    b.Navigation("doctor");

                    b.Navigation("specialty");
                });
#pragma warning restore 612, 618
        }
    }
}
